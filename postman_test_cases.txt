Here are sample test cases for Postman to verify the role-based access control.

**Before you start:**

*   **Ensure you have users with `ADMIN`, `INSTRUCTOR`, and `USER` roles in your database.** If not, you'll need to create them first.
*   **Authentication:** All protected endpoints require a JWT token in the `Authorization` header (e.g., `Bearer <your_jwt_token>`). You'll need to obtain this token by authenticating a user.

---

### 1. Authentication (Public Endpoint)

*   **Endpoint:** `/api/public/authenticate`
*   **Method:** `POST`
*   **Required Role:** None (public)
*   **Request Body (JSON):**
    ```json
    {
        "username": "your_username",
        "password": "your_password"
    }
    ```
*   **Expected Response:** A JWT token in the response body. Use this token for subsequent requests.

---

### 2. AdminController Tests (`/api/admin`)

**All endpoints in this controller require `ADMIN` role.**

*   **Get All Users**
    *   **Endpoint:** `/api/admin/users`
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

*   **Delete User by Username**
    *   **Endpoint:** `/api/admin/delete/user/{username}` (replace `{username}` with an actual username)
    *   **Method:** `DELETE`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

*   **Change User Role**
    *   **Endpoint:** `/api/admin/user/{userId}/role?newRole={newRole}` (replace `{userId}` with an actual user ID and `{newRole}` with ADMIN, INSTRUCTOR, or USER)
    *   **Method:** `PUT`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

---

### 3. UserProfileController Tests (`/api/user`)

**All endpoints in this controller require `ADMIN`, `INSTRUCTOR`, or `USER` roles at the class level. Specific methods have additional checks.**

*   **Get User Profile by ID**
    *   **Endpoint:** `/api/user/profile/{userID}` (replace `{userID}` with an actual user ID)
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN` (any user profile), `USER`/`INSTRUCTOR` (their own user profile)
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - own ID):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - other ID):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Update User Profile**
    *   **Endpoint:** `/api/user/profile`
    *   **Method:** `PUT`
    *   **Required Role:** `ADMIN` (any user profile), `USER`/`INSTRUCTOR` (their own user profile)
    *   **Request Body (JSON):** A `UserProfile` object, ensure `user.id` matches the authenticated user's ID or you are an ADMIN.
        ```json
        {
            "id": 1, // UserProfile ID
            "firstName": "UpdatedFirstName",
            "lastName": "UpdatedLastName",
            "users": {
                "id": 1 // User ID associated with the profile
            }
            // ... other UserProfile fields
        }
        ```
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - own profile):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - other profile):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Update User Password**
    *   **Endpoint:** `/api/user/profile/password?userID={userID}&newPassword={newPassword}`
    *   **Method:** `PUT`
    *   **Required Role:** `ADMIN` (any user), `USER`/`INSTRUCTOR` (their own password)
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - own ID):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - other ID):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

---

### 4. CourseController Tests (`/api/courses`)

*   **Create Course**
    *   **Endpoint:** `/api/courses`
    *   **Method:** `POST`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Request Body (JSON):** A `Course` object.
        ```json
        {
            "title": "New Course",
            "description": "A description",
            "courseCode": "NC001"
            // ... other Course fields
        }
        ```
    *   **Expected Status (ADMIN/INSTRUCTOR):** `201 Created`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Update Course**
    *   **Endpoint:** `/api/courses/{courseId}` (replace `{courseId}` with an existing course ID)
    *   **Method:** `PUT`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Request Body (JSON):** A `Course` object with updated details.
    *   **Expected Status (ADMIN/INSTRUCTOR):** `200 OK`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Get All Courses**
    *   **Endpoint:** `/api/courses`
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`, `USER`
    *   **Expected Status (All Roles):** `200 OK`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Get Course by ID**
    *   **Endpoint:** `/api/courses/{courseId}` (replace `{courseId}` with an existing course ID)
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`, `USER`
    *   **Expected Status (All Roles):** `200 OK`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Delete Course**
    *   **Endpoint:** `/api/courses/{courseId}` (replace `{courseId}` with an existing course ID)
    *   **Method:** `DELETE`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `204 No Content`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

---

### 5. NotificationController Tests (`/api/notifications`)

*   **Create Notification**
    *   **Endpoint:** `/api/notifications?userId={userId}` (replace `{userId}` with a target user ID)
    *   **Method:** `POST`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Request Body (JSON):** A `NotificationDTO` object.
        ```json
        {
            "title": "New Notification",
            "message": "This is a test notification.",
            "type": "SYSTEM",
            "category": "ANNOUNCEMENT",
            "priority": "HIGH"
        }
        ```
    *   **Expected Status (ADMIN/INSTRUCTOR):** `200 OK`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Get User Notifications**
    *   **Endpoint:** `/api/notifications/user/{userId}` (replace `{userId}` with an actual user ID)
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN` (any user's notifications), `USER`/`INSTRUCTOR` (their own notifications)
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - own ID):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - other ID):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Mark Notification as Read**
    *   **Endpoint:** `/api/notifications/{id}/read` (replace `{id}` with an actual notification ID)
    *   **Method:** `PUT`
    *   **Required Role:** `ADMIN` (any notification), `USER`/`INSTRUCTOR` (their own notification)
    *   **Expected Status (ADMIN):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - own notification):** `200 OK`
    *   **Expected Status (USER/INSTRUCTOR - other notification):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

---

### 6. VideoController Tests (`/api/videos`)

*   **Upload Video**
    *   **Endpoint:** `/api/videos/upload`
    *   **Method:** `POST`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Request Body (form-data):**
        *   `file`: Select a video file.
        *   `title`: "My New Video"
        *   `description`: "A description of the video."
    *   **Expected Status (ADMIN/INSTRUCTOR):** `201 Created`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Get All Videos**
    *   **Endpoint:** `/api/videos`
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`, `USER`
    *   **Expected Status (All Roles):** `200 OK`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Delete Video**
    *   **Endpoint:** `/api/videos/{id}` (replace `{id}` with an existing video ID)
    *   **Method:** `DELETE`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `204 No Content`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

---

### 7. CertificateController Tests (`/api/certificates`)

*   **Create Certificate**
    *   **Endpoint:** `/api/certificates`
    *   **Method:** `POST`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Request Body (form-data):**
        *   `learnerId`: (ID of an existing learner)
        *   `courseId`: (ID of an existing course)
        *   `instructorId`: (ID of an existing instructor)
        *   `dateOfCertificate`: "2025-07-10"
        *   `file`: (Optional) Select a certificate file (e.g., PDF).
    *   **Expected Status (ADMIN/INSTRUCTOR):** `201 Created`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Get Certificate by ID**
    *   **Endpoint:** `/api/certificates/{id}` (replace `{id}` with an existing certificate ID)
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR` (any certificate), `USER` (their own certificate)
    *   **Expected Status (ADMIN/INSTRUCTOR):** `200 OK`
    *   **Expected Status (USER - own certificate):** `200 OK`
    *   **Expected Status (USER - other certificate):** `403 Forbidden`
    *   **Expected Status (Unauthorized):** `403 Forbidden`

*   **Get All Certificates**
    *   **Endpoint:** `/api/certificates`
    *   **Method:** `GET`
    *   **Required Role:** `ADMIN`, `INSTRUCTOR`
    *   **Expected Status (ADMIN/INSTRUCTOR):** `200 OK`
    *   **Expected Status (USER/Unauthorized):** `403 Forbidden`

*   **Delete Certificate**
    *   **Endpoint:** `/api/certificates/{id}` (replace `{id}` with an existing certificate ID)
    *   **Method:** `DELETE`
    *   **Required Role:** `ADMIN`
    *   **Expected Status (ADMIN):** `204 No Content`
    *   **Expected Status (INSTRUCTOR/USER/Unauthorized):** `403 Forbidden`

---

### 8. CheckoutController Tests (`/api/checkout`)

*   **Create Checkout Session**
    *   **Endpoint:** `/api/checkout/create-checkout-session`
    *   **Method:** `POST`
    *   **Required Role:** `USER`
    *   **Request Body (JSON):**
        ```json
        {
            "tier": "premium",
            "successUrl": "http://localhost:3000/success",
            "cancelUrl": "http://localhost:3000/cancel"
        }
        ```
    *   **Expected Status (USER):** `200 OK` (with session URL)
    *   **Expected Status (ADMIN/INSTRUCTOR/Unauthorized):** `403 Forbidden`

---

Remember to replace placeholders like `{username}`, `{userID}`, `{courseId}`, `{id}` with actual values from your database. Good luck with your testing!