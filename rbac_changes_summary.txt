# Technical Implementation Details: Role-Based Access Control & Instructor-Student Relationships

## Core Architectural Changes

1. **Security Layer Enhancement**
   - Implemented hierarchical access control:
     - ADMIN → Full access (all profiles)
     - INSTRUCTOR → Own profile + assigned students
     - USER → Only own profile
   - Replaced blanket `@PreAuthorize` with granular service-level checks
   - Added `Authentication` parameter propagation to service layer

2. **Relationship Management System**
   - Created `InstructorStudentRelationship` JPA entity:
     ```java
     @Entity
     @Table(name = "instructor_student")
     public class InstructorStudentRelationship {
         @Id @GeneratedValue(strategy = IDENTITY)
         private Long id;
         private Long instructorId;  // FK to Users
         private Long studentId;    // FK to Users
         private boolean active = true;
     }
     ```
   - Implemented soft-delete capability via `active` flag

## Service Layer Modifications

### UserProfileService Changes
- Added access-controlled variants of existing methods:
  ```java
  // Before
  public UserProfile getUserProfile(Long userId)
  
  // After
  public UserProfile getUserProfile(Long userId, Authentication auth) {
      UserPrincipal principal = (UserPrincipal) auth.getPrincipal();
      
      if (isAdmin(principal) {
          return getUserProfile(userId); // Original implementation
      }
      if (isInstructor(principal) {
          if (userId.equals(principal.getId()) || 
              relationshipService.isStudentOfInstructor(userId, principal.getId())) {
              return getUserProfile(userId);
          }
      }
      // ... user validation ...
  }
  ```

### New UserRelationshipService
```java
public interface UserRelationshipService {
    // Relationship management
    InstructorStudentRelationship createRelationship(Long instructorId, Long studentId);
    void deactivateRelationship(Long instructorId, Long studentId);
    
    // Access control
    boolean isStudentOfInstructor(Long studentId, Long instructorId);
    List<Long> getStudentsForInstructor(Long instructorId);
}
```

## Database Schema Updates

1. **New Tables**
   - `instructor_student`:
     ```
     id: BIGINT PK
     instructor_id: BIGINT (FK to users)
     student_id: BIGINT (FK to users)
     active: BOOLEAN
     ```

2. **Modified Tables**
   - `users` now has many-to-many relationship with `roles` via join table `user_roles`

## Security Flow Changes

### Before:
```
Controller → @PreAuthorize → Service → Repository
```

### After:
```
Controller → @PreAuthorize("isAuthenticated()")
           → Service (implements business logic + fine-grained access control)
           → RelationshipService (for instructor-student validation)
           → Repository
```

## Exception Handling

Added new exception hierarchy:
```
AccessDeniedException (Spring) ← Custom exceptions:
   ├─ DuplicateRelationshipException
   └─ RelationshipNotFoundException
```

## Migration Considerations

1. **Data Migration Required**
   - Need to populate initial instructor-student relationships
   - Existing users must be mapped to proper roles

2. **Backward Compatibility**
   - Maintained original method signatures
   - New secured methods have `Authentication` parameter
   - Unsecured methods marked as `@Deprecated` with javadoc

## Performance Impact

1. **Additional Queries**
   - Each profile access now requires:
     1. Role check (cached)
     2. Optional relationship check (for instructors)

2. **Optimizations**
   - Added `@Transactional(readOnly = true)` where appropriate
   - Implemented batch fetching for relationship checks

## API Changes

All existing endpoints remain compatible, but now:
- Return 403 instead of 401 for unauthorized access
- Include more detailed error messages in payload

This architecture provides proper separation of concerns while maintaining the flexibility to add more relationship types in the future.